<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="PRG_FB_DigitalInputExt_Test" Id="{1a62617b-4f7d-4b07-a7a8-9991957a33c8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_FB_DigitalInputExt_Test
VAR
	bFirstCycle : BOOL := TRUE;
	
	bIn						: BOOL;					(* Current value of input from object *)
	bEnableForce			: BOOL;					(* Enables forcing in digital input object *)
	bFallingTrigger			: BOOL;					(* Falling trigger detected bit *)
	bRisingTrigger			: BOOL;					(* Rising trigger detected bit *)
	bSetForceValue			: BOOL;					(* Triggers method that enables forcing value of input *)
	bResetForceValue		: BOOL;					(* Triggers method that enables forcing value of input *)
	
	nFallingTriggerCounter	: USINT;				(* Falling trigger count *)
	nRisingTriggerCounter	: USINT;				(* Rising trigger count *)
	
	piTestSensor 			: FB_DigitalInputExt;	(* Extended digital input object *)
	
	bInit					: BOOL;
	bAbort  				: BOOL;
	bReset 					: BOOL;
	bStartTracking			: BOOL;
	
	iState					: USINT;
	bActive					: BOOL;
	bErrorTimedout			: BOOL;
	CurrentTimeout			: TIME;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstCycle THEN
	bFirstCycle := FALSE;
	piTestSensor.MR_FirstCycleEx( 	sName := 'Test_Sensor',
									bEnableTimeout := TRUE,
									tDefaultTimeout := T#10S);
END_IF

(* Control input simulation *)
piTestSensor.EnableForce := bEnableForce;

(* Assign status variables *)
bIn := piTestSensor.In;
bRisingTrigger := piTestSensor.RisingTrigger;
bFallingTrigger := piTestSensor.FallingTrigger;

(* Count falling trigger *)
IF bFallingTrigger THEN
	nFallingTriggerCounter := nFallingTriggerCounter + 1;
END_IF

(* Count rising trigger *)
IF bRisingTrigger THEN
	nRisingTriggerCounter := nRisingTriggerCounter + 1;
END_IF

(* If simulation of input enabled set it's value to TRUE *)
IF bSetForceValue THEN
	bSetForceValue := FALSE;
	piTestSensor.MR_SetForceValue();
END_IF

(* If simulation of input enabled set it's value to FALSE *)
IF bResetForceValue THEN
	bResetForceValue := FALSE;
	piTestSensor.MR_ResetForceValue();
END_IF

bErrorTimedout := piTestSensor.ErrorTimedout;

bActive 		:= piTestSensor.Active;
CurrentTimeout	:= piTestSensor.CurrentTimeout;

IF bReset THEN
	bReset := FALSE;
	iState := 30;		
END_IF

CASE iState OF 
	0:
		IF bInit THEN
			bInit := FALSE;
			iState := 10;
			
		ELSIF bAbort THEN
			bAbort := FALSE;
			iState := 20;
			
		ELSIF bStartTracking THEN
			bStartTracking := FALSE;
			iState := 40;
			
		END_IF
	10:
		piTestSensor.MR_Init();
		IF piTestSensor.Active THEN
			iState := 0;
		END_IF
		
	20:
		piTestSensor.MR_Abort();
		IF NOT piTestSensor.Active THEN
			iState := 0;
		END_IF
		
	30:
		piTestSensor.MR_Reset();		
		IF NOT piTestSensor.ErrorTimedout THEN
			iState := 0;
		END_IF

	40:
		piTestSensor.MR_StartTracking();
		IF piTestSensor.In OR piTestSensor.ErrorTimedout THEN
			iState := 0;
		END_IF
	
END_CASE

piTestSensor();]]></ST>
    </Implementation>
    <LineIds Name="PRG_FB_DigitalInputExt_Test">
      <LineId Id="398" Count="2" />
      <LineId Id="514" Count="1" />
      <LineId Id="403" Count="34" />
      <LineId Id="439" Count="47" />
      <LineId Id="92" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>