<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_MachineControl" Id="{d5b9cdd1-1c70-4bc2-b4fb-425d836f6218}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MachineControl EXTENDS FB_UniversalMachine IMPLEMENTS I_MachineControl
VAR
	iLoop : USINT;	(* for loop auxilary variable *)

	(* --- Sample actuators - from shell template --- DELETE IF NOT NEEDED - *)
	arrDigitalInput		: ARRAY[0..19] OF FB_DigitalInput;			(* Array of sample digital inputs *)
	arrDigitalOutput	: ARRAY[0..19] OF FB_DigitalOutput;			(* Array of sample digital outputs *)
	arrCylinderDc		: ARRAY[0..9] OF FB_DoubleCoilCylinder;		(* Array of sample double coil cylinders *)
	arrCylinderSc		: ARRAY[0..9] OF FB_SingleCoilCylinder;		(* Array of sample single coil cylinders *)
	arrAxis				: ARRAY[0..19] OF FB_AxisServo;				(* Array of sample axis *)
	arrRobot			: ARRAY[0..9] OF FB_CR800EtherCAT;			(* Array of sample robots *)
	
	tonTestDelay	: TON;	(* Delay which allows to see any page changes during tests *)
	(* --- Sample actuators - from shell template --- DELETE IF NOT NEEDED - *)
	
	bStart			: BOOL;
	
	(* CR800 - testing *)
	lrPositionX1 : LREAL := 203.733;
	lrPositionY1 : LREAL := 100.000;
	lrRotation1  : LREAL := 216.699;
	
	lrPositionX2 : LREAL := -13.733;
	lrPositionY2 : LREAL := 8.001;
	lrRotation2  : LREAL := -2.889;
	
	
	bUserDefinedArea1	: BOOL;
	bTryIt1				: BOOL;
	bTryIt2				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstCycle THEN
	(* bFirstCycle bit reset by parent *)
	(* --- Assign initial parameters for machine objects ---*)
	(* ---- DELETE IF NOT NEEDED ---- *)
	(* Assign sample digital inputs *)
	FOR iLoop := 0 TO 19 DO
		arrDigitalInput[iLoop].MR_FirstCycle(CONCAT('Digital_Input_',USINT_TO_STRING(iLoop)),CONCAT('EL1008-',USINT_TO_STRING(iLoop/8)),USINT_TO_STRING(iLoop MOD 8));
	END_FOR
	
	(* Assign sample digital outputs *)
	FOR iLoop := 0 TO 19 DO
		arrDigitalOutput[iLoop].MR_FirstCycle(CONCAT('Digital_Output_',USINT_TO_STRING(iLoop)),CONCAT('EL2008-',USINT_TO_STRING(iLoop/8)),USINT_TO_STRING(iLoop MOD 8));
	END_FOR
	
	(* Assign sample cylinders *)
	FOR iLoop := 0 TO 9 DO
		arrCylinderDc[iLoop].MR_FirstCycle(	sName					:= CONCAT('Double_Coil_Cylinder_',USINT_TO_STRING(iLoop)),
											sActiveSensorModuleType :=CONCAT('EL1008-',USINT_TO_STRING(iLoop/4)),
											sActiveSensorPortID 	:= USINT_TO_STRING(iLoop*2),
											sHomeSensorModuleType	:=CONCAT('EL1008-',USINT_TO_STRING(iLoop/4)),
											sHomeSensorPortID		:= USINT_TO_STRING(iLoop*2+1),
											tGoHomeTimeout			:= T#10S,
											tGoActiveTimeout		:= T#10S,
											tDelay 					:= T#1S);
		arrCylinderDc[iLoop].Simulation := TRUE;
		arrCylinderDc[iLoop].ref_poActiveValve.ModuleType := CONCAT('EL2008-',USINT_TO_STRING(iLoop/4));
		arrCylinderDc[iLoop].ref_poActiveValve.PortID := USINT_TO_STRING(iLoop*2);
		arrCylinderDc[iLoop].ref_poHomeValve.ModuleType := CONCAT('EL2008-',USINT_TO_STRING(iLoop/4));
		arrCylinderDc[iLoop].ref_poHomeValve.PortID := USINT_TO_STRING(iLoop*2+1);
	END_FOR
	
	FOR iLoop := 0 TO 9 DO
		arrCylinderSc[iLoop].MR_FirstCycle(	sName				:= CONCAT('Single_Coil_Cylinder_', USINT_TO_STRING(iLoop)),
											sActiveSensorModuleType :=CONCAT('EL1008-',USINT_TO_STRING(iLoop/4)),
											sActiveSensorPortID :=USINT_TO_STRING(iLoop*2),
											sHomeSensorModuleType :=CONCAT('EL1008-',USINT_TO_STRING(iLoop/4)),
											sHomeSensorPortID	:=USINT_TO_STRING(iLoop*2+1),
											tGoHomeTimeout 		:= T#12S,
											tGoActiveTimeout 	:= T#12S,
											tDelay 				:= T#2S);
		arrCylinderSc[iLoop].Simulation := TRUE;
		arrCylinderSc[iLoop].ref_poActiveValve.ModuleType := CONCAT('EL2008-',USINT_TO_STRING(iLoop/8));
		arrCylinderSc[iLoop].ref_poActiveValve.PortID := USINT_TO_STRING(iLoop);
	END_FOR
	
	(* Assign sample axes *)
	FOR iLoop := 0 TO 19 DO
		arrAxis[iLoop].MR_FirstCycle( 	sName 				:= CONCAT('Axis_',USINT_TO_STRING(iLoop)),
										sMeasurementUnits 	:= 'mm',
										bModulo				:= FALSE);
		arrAxis[iLoop].ref_HomeSwitch.ModuleType :=CONCAT('EL1008-',USINT_TO_STRING(iLoop/8));
		arrAxis[iLoop].ref_HomeSwitch.PortID :=USINT_TO_STRING(iLoop MOD 8);			
	END_FOR	
	
	(* Assign sample robots *)
	FOR iLoop := 0 TO 9 DO
		arrRobot[iLoop].MR_FirstCycle(	sName		:= CONCAT('Robot_',USINT_TO_STRING(iLoop)),
										iOverride	:= 100);
	END_FOR
	(* ---- DELETE IF NOT NEEDED ---- *)
END_IF

(* Execute parent implementation *)
SUPER^();

(* --- Cyclic run of internal objects ---*)
(* ---- DELETE IF NOT NEEDED ---- *)
(* Cyclic run of sample inputs *)
FOR iLoop := 0 TO 19 DO
	arrDigitalInput[iLoop]();
END_FOR

(* Cyclic run of sample outputs *)
FOR iLoop := 0 TO 19 DO
	arrDigitalOutput[iLoop]();
END_FOR
	
(* Cyclic run of sample double coil cylinders *)
FOR iLoop := 0 TO 9 DO
	arrCylinderDc[iLoop]();
END_FOR

(* Cyclic run of sample single coil cylinders *)
FOR iLoop := 0 TO 9 DO
	arrCylinderSc[iLoop]();
END_FOR

(* Cyclic run of sample axis *)
FOR iLoop := 0 TO 19 DO
	arrAxis[iLoop]();
END_FOR

(* Cyclic run of sample robots *)
FOR iLoop := 0 TO 9 DO
	arrRobot[iLoop]();
END_FOR

IF bTryIt1 THEN
	arrRobot[0].MR_SendPosition1( lrPositionX1 := lrPositionX1,
								lrPositionY1 := lrPositionY1,
								lrRotation1  := lrRotation1);
	IF NOT arrRobot[0].SendingPosition1 THEN
		bTryIt1 := FALSE;
	END_IF
END_IF

IF bTryIt2 THEN
	arrRobot[0].MR_SendPosition2( lrPositionX2 := lrPositionX2,
								lrPositionY2 := lrPositionY2,
								lrRotation2  := lrRotation2);
	IF NOT arrRobot[0].SendingPosition2 THEN
		bTryIt1 := FALSE;
	END_IF
END_IF

bUserDefinedArea1 := arrRobot[0].UserDefinedArea1;

tonTestDelay();
(* ---- DELETE IF NOT NEEDED ---- *)]]></ST>
    </Implementation>
    <Folder Name="Properties" Id="{0141e7c7-d7a3-4874-947e-020e6796c200}" />
    <Folder Name="Requests" Id="{87dea150-67b6-4bd1-80d7-236b0300f0ef}" />
    <Folder Name="StateMachine" Id="{ce0650a8-6ab1-4c8a-90ad-8f8a3b70f51b}" />
    <Property Name="Axes" Id="{92613651-42a6-45b1-b806-398530740271}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Axes : REFERENCE TO ARRAY[0..19] OF FB_AxisServo]]></Declaration>
      <Get Name="Get" Id="{5e4c09fd-1547-4a48-b0cd-bc322922241a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axes REF= arrAxis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DoubleCoilCylinders" Id="{3e8076e4-741d-44c3-9d5d-78133e663eb4}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY DoubleCoilCylinders : REFERENCE TO ARRAY[0..9] OF FB_DoubleCoilCylinder]]></Declaration>
      <Get Name="Get" Id="{596f8f22-2465-48b8-bd19-241754db476a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DoubleCoilCylinders REF= arrCylinderDc;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Inputs" Id="{0175a8c0-7193-4669-bfd1-94bccca0ea61}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Inputs : REFERENCE TO ARRAY[0..19] OF FB_DigitalInput]]></Declaration>
      <Get Name="Get" Id="{3e5542f6-c22b-4509-83ce-e8584b5d0872}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Inputs REF= arrDigitalInput;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MR_Start" Id="{4c0408b2-57ad-4175-b738-4e552b575c8c}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Start : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRunning := TRUE;

IF NOT bStart THEN
	fbMsgAutoStarted.Send(0);
	bStart := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Stop" Id="{bfc915b7-c506-42a8-b872-f92c6ea4ef30}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRunning := FALSE;

IF bStart THEN
	fbMsgAutoStopped.Send(0);
	bStart := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Aborting" Id="{b79310e9-59a6-411e-8db9-c2ddf7d83b13}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Aborting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to abort all machine objects's e.g robots, axes, cylinders. 
At the end add "eMachineState := MACHINE_STATE_UNINITIALIZED;" to finish aborting.
*)
(* Aborting simulation - DELETE *)
tonTestDelay(IN := TRUE, PT:= T#4S);
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_UNINITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Auto" Id="{48482e89-0237-4fb2-85b5-7819f9143d97}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Auto
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to perform automatic process.
*)
;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_AutoToManual" Id="{6cabe80b-23c8-4d04-8f0c-29acd6a6fffc}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_AutoToManual
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to switch machine into manual mode. 
At the end add "eMachineState := MACHINE_STATE_MANUAL;" to finish switching.
*)
(* Switching mode to manual simulation - DELETE *)
tonTestDelay(IN := TRUE, PT:= T#4S);
bRunning := FALSE;
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_MANUAL;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Emergency" Id="{5e5fe159-327c-4b2a-9c60-e7df1c3806d7}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Emergency
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Initializing" Id="{2529a51f-805d-4388-b87d-508f6d168e33}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Initializing
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to initialize all machine objects's e.g robots, axes, cylinders. 
At the end add "eMachineState := MACHINE_STATE_READY_INITIALIZED;" to finish initialization.
*)
(* Initialization simulation - DELETE  *)
tonTestDelay(IN := TRUE, PT:= T#4S);
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_READY_INITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Manual" Id="{fb45560f-17c6-4789-80d6-d03d6888c10f}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Manual
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Leave empty - manual mode is provided by HMI controler and automatic frame generator.
*)
;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualToAuto" Id="{01493fa1-c98d-4f98-b816-64158d6fe370}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualToAuto
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to switch machine into auto mode. 
At the end add "eMachineState := MACHINE_STATE_MANUAL;" to finish switching.
*)
(* Switching mode to auto simulation - DELETE *)
tonTestDelay(IN := TRUE, PT:= T#4S);
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_AUTO;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ReadyInitialized" Id="{33c52bb3-ffb3-4ed1-a341-08f8f9a91688}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ReadyInitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
Add code here if some internal parameters are needed to set after initialization or leave it default.
At the end add "eMachineState := MACHINE_STATE_AUTO;" to finish and go to IDLE state.
*)
(* Ready-Initialized simulation - DELETE  *)
tonTestDelay(IN := TRUE, PT:= T#4S);
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_AUTO;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Reset" Id="{bbe5619f-4512-43bc-9a62-49405579dbf0}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 
Add here code to reset all machine objects's e.g robots, axes, cylinders. 
At the end add "eMachineState := MACHINE_STATE_RESET_DONE;" to finish reseting.
*)
(* Reset simulation - DELETE  *)
tonTestDelay(IN := TRUE, PT:= T#4S);
IF tonTestDelay.Q THEN
	tonTestDelay(IN := FALSE);
	eMachineState := MACHINE_STATE_RESET_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ResetDone" Id="{cfa7de6a-b446-459d-8b3c-0d0f1de43277}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ResetDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eMachineState := eMachineStateBeforeReset;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitialized" Id="{e7619e67-85c1-49b4-8aba-7afe13dbdeed}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Outputs" Id="{6b61f651-6437-4c5f-ba74-d74dfe5afc38}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Outputs : REFERENCE TO ARRAY[0..19] OF FB_DigitalOutput]]></Declaration>
      <Get Name="Get" Id="{089cd81b-ef72-4fbc-8edd-f714095b50aa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Outputs REF= arrDigitalOutput;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Robots" Id="{53ffbda7-c76a-49f3-9a7f-4ed0b89be1bf}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Robots : REFERENCE TO ARRAY[0..9] OF FB_CR800EtherCAT]]></Declaration>
      <Get Name="Get" Id="{f319317d-d1dd-4219-a7d7-140f423acd2e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Robots REF= arrRobot;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SafeInputs" Id="{0e5656b6-0d2e-422a-9de6-0557cd1a3000}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY SafeInputs : REFERENCE TO ARRAY[0..19] OF FB_DigitalInput]]></Declaration>
      <Get Name="Get" Id="{0a80ea39-7b35-4d0c-adf6-5ed2dfbcd07c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SafeInputs REF= arrDigitalInput;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SafeOutputs" Id="{948e86c8-9224-44ec-84ed-07b8bb65cdb5}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY SafeOutputs : REFERENCE TO ARRAY[0..19] OF FB_DigitalOutput]]></Declaration>
      <Get Name="Get" Id="{973717f2-8e2b-4d54-9814-ffb470879c06}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SafeOutputs REF= arrDigitalOutput;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SingleCoilCylinders" Id="{617dc4fe-9c3f-4661-a9d7-a5fc0ea7f496}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY SingleCoilCylinders : REFERENCE TO ARRAY[0..9] OF FB_SingleCoilCylinder]]></Declaration>
      <Get Name="Get" Id="{01c53784-0f32-432b-b0b0-fb4c60c16a63}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SingleCoilCylinders REF= arrCylinderSc;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_MachineControl">
      <LineId Id="3" Count="11" />
      <LineId Id="140" Count="0" />
      <LineId Id="16" Count="3" />
      <LineId Id="141" Count="3" />
      <LineId Id="20" Count="3" />
      <LineId Id="149" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="146" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="156" Count="1" />
      <LineId Id="32" Count="6" />
      <LineId Id="159" Count="1" />
      <LineId Id="39" Count="65" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.Axes.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.DoubleCoilCylinders.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.Inputs.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MR_Start">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MR_Stop">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Aborting">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Auto">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_AutoToManual">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Emergency">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Initializing">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Manual">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_ManualToAuto">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_ReadyInitialized">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Reset">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_ResetDone">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.MS_Uninitialized">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.Outputs.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.Robots.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.SafeInputs.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.SafeOutputs.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.SingleCoilCylinders.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>